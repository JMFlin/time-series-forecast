install.packages("styler")
library()styler
library(styler)
styler:::style_active_file()
usethis::use_tidy_style()
# Load libraries
setwd("C:/Users/janne/Documents/time-series-forecast")
usethis::use_tidy_style()
usethis::use_tidy_style()
reprex::reprex(style = TRUE)
?tsfeatures
# Load libraries
setwd("C:/Users/janne/Documents/time-series-forecast")
library(h2o) # Awesome ML Library
library(timetk) # Toolkit for working with time series in R
library(tidyquant) # Loads tidyverse, financial pkgs, used to get data
library(janitor)
library(glue)
library(futile.logger)
library(tsfeatures)
library(styler)
source("R/evaluate.R")
source("R/predict.R")
LoadData <- function(unit) {
forecast.data <- tq_get("S4248SM144NCEN", get = "economic.data", from = "2010-01-01", to = "2017-12-31")
forecast.data <- forecast.data %>%
rename(!!unit := price)
return(forecast.data)
}
TidyAcf <- function(forecast.data, value, lags = 0:20) {
acf.values <- forecast.data %>%
pull(unit) %>%
acf(lag.max = tail(lags, 1), plot = FALSE) %>%
.$acf %>%
.[, , 1]
ret <- tibble(acf = acf.values) %>%
rowid_to_column(var = "lag") %>%
mutate(lag = lag - 1) %>%
filter(lag %in% lags)
return(ret)
}
InitialPlot <- function(forecast.data, data.frequency) {
if (data.frequency == "month") {
breaks <- "1 year"
} else if (data.frequency == "week") {
breaks <- "4 month"
} else if (data.frequency == "day") {
breaks <- "1 month"
}
forecast.data %>%
ggplot(aes(date, unit)) +
geom_line(col = palette_light()[1]) +
geom_point(col = palette_light()[1]) +
geom_ma(ma_fun = SMA, n = 12, size = 1) +
theme_tq() +
# scale_x_date(date_breaks = breaks, date_labels = "%Y") +
labs(title = "Time series to forecast")
}
# unit <- "unit"
n <- c(1, 2, 3)
flog.info("Loading data")
forecast.data <- LoadData("unit")
# SEE SCALE
data.frequency <- forecast.data %>%
tk_index() %>%
tk_get_timeseries_summary() %>%
select(scale)
nrow(forecast.data)*0.5
nrow(forecast.data)*0.4
round(nrow(forecast.data)*0.4)
max.lag <- round(nrow(forecast.data)*0.4)
flog.info("Plotting time series")
InitialPlot(forecast.data, data.frequency)
flog.info("Augmenting data")
forecast.data.augmented <- forecast.data %>%
tk_augment_timeseries_signature() %>%
select(-diff)
flog.info("Cleaning data")
forecast.data.cleaned <- forecast.data.augmented %>%
clean_names() %>%
remove_empty(c("cols")) %>%
select_if(~ !any(is.na(.))) %>%
mutate_if(is.ordered, ~ as.character(.) %>% as.factor())
flog.info("Finding optimal lag")
optimal.lag.setting <- forecast.data.cleaned %>%
TidyAcf(unit, lags = 1:max.lag) %>%
filter(acf == max(acf)) %>%
pull(lag)
flog.info("Plotting ACF")
forecast.data.cleaned %>%
TidyAcf(unit, lags = 1:max.lag) %>%
ggplot(aes(lag, acf)) +
geom_vline(xintercept = optimal.lag.setting, size = 3, color = palette_light()[[2]]) +
geom_segment(aes(xend = lag, yend = 0), color = palette_light()[[1]]) +
geom_point(color = palette_light()[[1]], size = 2) +
geom_label(aes(label = acf %>% round(2)),
vjust = -1, color = palette_light()[[1]]
) +
theme_tq() +
labs(title = "ACF")
flog.info("Inserting optimal lag into feature data")
forecast.data.lagged <- forecast.data.cleaned %>%
mutate(value.lag = lag(unit, n = optimal.lag.setting)) %>%
filter(!is.na(value.lag))
flog.info("Plotting training strategy for h2o")
TrainingStrategy(forecast.data.lagged)
xmin.valid <- forecast.data.lagged %>%
filter(forecast.data.lagged$date > (max(forecast.data.lagged$date) - years(1)) &
forecast.data.lagged$date < (max(forecast.data.lagged$date) - months(6, abbreviate = FALSE))) %>%
summarize(earliest_date = as.numeric(min(date)), latest_date = as.numeric(max(date))) %>%
select(earliest_date, latest_date)
xmin.valid
forecast.data.lagged$date > (max(forecast.data.lagged$date) - years(1)) &
forecast.data.lagged$date < (max(forecast.data.lagged$date) - months(6, abbreviate = FALSE))
xmin.train <- forecast.data.lagged %>%
filter(forecast.data.lagged$date == (max(forecast.data.lagged$date) - months(6, abbreviate = FALSE) + months(1, abbreviate = FALSE))) %>%
summarize(earliest_date = as.numeric(min(date))) %>%
select(earliest_date)
forecast.data.lagged$date == (max(forecast.data.lagged$date) - months(6, abbreviate = FALSE) + months(1, abbreviate = FALSE))
xmin.valid <- forecast.data.lagged %>%
filter(forecast.data.lagged$date > (max(forecast.data.lagged$date) - years(1)) &
forecast.data.lagged$date < (max(forecast.data.lagged$date) - months(6, abbreviate = FALSE))) %>%
summarize(earliest_date = as.numeric(min(date)), latest_date = as.numeric(max(date))) %>%
select(earliest_date, latest_date)
xmin.train <- forecast.data.lagged %>%
filter(forecast.data.lagged$date == (max(forecast.data.lagged$date) - months(6, abbreviate = FALSE) + months(1, abbreviate = FALSE))) %>%
summarize(earliest_date = as.numeric(min(date))) %>%
select(earliest_date)
# Plot Beer Sales with train, validation, and test sets shown
forecast.data.lagged %>%
ggplot(aes(date, unit)) +
# Validation Region
geom_rect(
xmin = xmin.valid$earliest_date,
xmax = xmin.valid$latest_date,
ymin = 0, ymax = Inf, alpha = 0.02,
fill = palette_light()[[3]]
) +
# Training Region
geom_rect(
xmin = xmin.train$earliest_date,
xmax = xmin.train$earliest_date,
ymin = 0, ymax = Inf, alpha = 0.02,
fill = palette_light()[[4]]
) +
# Data
geom_line(col = palette_light()[1]) +
geom_point(col = palette_light()[1]) +
geom_ma(ma_fun = SMA, n = 12, size = 1) +
# Aesthetics
theme_tq() +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(
title = "Beer Sales: 2007 through 2017",
subtitle = "Train, Validation, and Test Sets Shown"
)
