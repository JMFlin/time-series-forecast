pacman::p_load(
# Machine learning and forecasting
"h2o", # Awesome ML Library
"caret", # Awesome ML Library
"prophet", # GAM time series modeling
"forecast", # Forecasting models and predictions package
# Feature creation
"timetk", # Toolkit for working with time series in R
"TSA",
# Logging
"futile.logger", # Adds logging
# Data manipulation
"tidyquant", # Loads tidyverse, financial pkgs, used to get data
"janitor", # COlumn name handling
"glue", # A better paste function
"sweep", # Broom-style tidiers for the forecast package
"recipes", # Carry transformation to new data,
# Code styling
"styler", # Style r code
# Parallel processing
"doParallel" # Allow parallel processing with caret
)
# setwd("C:/Users/janne/Documents/time-series-forecast")
setwd(glue(getwd(), "/time-series-forecast"))
file.sources <- list.files("utils",
pattern = "*.R$", full.names = TRUE,
ignore.case = TRUE
)
invisible(sapply(file.sources, source, .GlobalEnv))
# How many steps to forecast at the end
n <- 4
# Specify unit of measurement
unit.of.measurement <- "unit"
# Minimum number of unique instances turned into factors
factor.limit <- 3
# Minimum number of unique instances turned into factors
factor.limit <- 7
# Preproceesing for multivariate models
preprocess <- c("center", "scale", "YeoJohnson")
# Control variable for caret
regression.control <- trainControl(
method = "cv",
number = 3
)
h2o.init() # Fire up h2o
h2o.no_progress() # Turn off output of progress bars
flog.info("Loading data")
forecast.data <- LoadData(unit.of.measurement)
data.frequency <- forecast.data %>%
tk_index() %>%
tk_get_timeseries_summary() %>%
dplyr::select(scale)
flog.info("Plotting time series")
InitialPlot(forecast.data, data.frequency)
flog.info("Cleaning target data")
forecast.data.cleaned <- CleanTarget(forecast.data, data.frequency)
if (data.frequency == "hour") {
seasonal.periods <<- c(24, 168)
} else if (data.frequency == "day") {
seasonal.periods <<- c(7, 365.25)
} else if (data.frequency == "week") {
seasonal.periods <<- c(52, 12)
} else if (data.frequency == "month") {
seasonal.periods <<- c(12, 1)
}
max.lag <<- round(nrow(forecast.data.cleaned) * 0.3)
optimal.lag.setting <<- forecast.data.cleaned %>%
TidyAcf(unit, lags = max(n):max.lag) %>%
filter(acf >= 0.6) %>%
#filter(acf >= max( acf[acf != max(acf)] )) %>%  # max(acf)
pull(lag)
flog.info("Plotting ACF")
AcfPlot(forecast.data.cleaned)
flog.info("Creating timetk features")
forecast.data.features <- CreateTimeTkFeatures(forecast.data.cleaned)
flog.info("Cleaning features data")
forecast.data.cleaned <- CleanFeatures(forecast.data.features)
flog.info("Starting multivariate modeling with h2o")
MultivariateSeriesH2O(forecast.data.cleaned)
forecast.data.cleaned
# Minimum number of unique instances turned into factors
factor.limit <- 12
flog.info("Loading data")
forecast.data <- LoadData(unit.of.measurement)
data.frequency <- forecast.data %>%
tk_index() %>%
tk_get_timeseries_summary() %>%
dplyr::select(scale)
flog.info("Plotting time series")
InitialPlot(forecast.data, data.frequency)
flog.info("Cleaning target data")
forecast.data.cleaned <- CleanTarget(forecast.data, data.frequency)
if (data.frequency == "hour") {
seasonal.periods <<- c(24, 168)
} else if (data.frequency == "day") {
seasonal.periods <<- c(7, 365.25)
} else if (data.frequency == "week") {
seasonal.periods <<- c(52, 12)
} else if (data.frequency == "month") {
seasonal.periods <<- c(12, 1)
}
max.lag <<- round(nrow(forecast.data.cleaned) * 0.3)
optimal.lag.setting <<- forecast.data.cleaned %>%
TidyAcf(unit, lags = max(n):max.lag) %>%
filter(acf >= 0.6) %>%
#filter(acf >= max( acf[acf != max(acf)] )) %>%  # max(acf)
pull(lag)
flog.info("Plotting ACF")
AcfPlot(forecast.data.cleaned)
flog.info("Creating timetk features")
forecast.data.features <- CreateTimeTkFeatures(forecast.data.cleaned)
flog.info("Cleaning features data")
forecast.data.cleaned <- CleanFeatures(forecast.data.features)
flog.info("Starting multivariate modeling with h2o")
MultivariateSeriesH2O(forecast.data.cleaned)
